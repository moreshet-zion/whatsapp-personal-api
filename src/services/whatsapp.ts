import makeWASocket, { DisconnectReason, type WASocket, useMultiFileAuthState, Browsers } from '@whiskeysockets/baileys'
import { Boom } from '@hapi/boom'
import pino from 'pino'
import path from 'path'
import fs from 'fs'

export type ConnectionStatus = 'connected' | 'disconnected'

type QRState = {
  qrString?: string
  qrImageBase64?: string
  ts?: number
}

class WhatsAppClient {
  private socket: WASocket | null = null
  private status: ConnectionStatus = 'disconnected'
  private qrState: QRState = {}
  private readonly sessionDir: string
  private readonly logger = pino({ level: process.env.LOG_LEVEL || 'info' })

  constructor(sessionDir = path.resolve(process.cwd(), 'sessions')) {
    this.sessionDir = sessionDir
    if (!fs.existsSync(this.sessionDir)) {
      fs.mkdirSync(this.sessionDir, { recursive: true })
    }
  }

  public getConnectionStatus(): ConnectionStatus {
    return this.status
  }

  public getQR(): QRState | null {
    if (this.status === 'connected') return null
    return this.qrState.qrString ? this.qrState : {}
  }

  public getSocket(): WASocket | null {
    return this.socket
  }

  public async start(): Promise<void> {
    const { state, saveCreds } = await useMultiFileAuthState(this.sessionDir)

    this.socket = makeWASocket({
      auth: state,
      printQRInTerminal: false,
      browser: Browsers.macOS('Safari'),
      logger: pino({ level: 'warn' }),
      syncFullHistory: false
    })

    this.status = this.socket.user ? 'connected' : 'disconnected'

    this.socket.ev.on('creds.update', saveCreds)

    this.socket.ev.on('connection.update', async (update) => {
      const { connection, lastDisconnect, qr } = update

      if (qr) {
        this.qrState.qrString = qr
        this.qrState.ts = Date.now()
        // qr image will be generated by endpoint to avoid heavy deps here
      }

      if (connection === 'open') {
        this.status = 'connected'
        this.qrState = {}
        this.logger.info('WhatsApp connected')
      } else if (connection === 'close') {
        const statusCode = (lastDisconnect?.error as Boom | undefined)?.output?.statusCode
        const shouldReconnect = statusCode !== DisconnectReason.loggedOut
        this.status = 'disconnected'
        this.logger.warn({ statusCode }, 'WhatsApp connection closed')
        if (shouldReconnect) {
          setTimeout(() => {
            this.start().catch((err) => this.logger.error({ err }, 'Reconnection failed'))
          }, 1000)
        }
      }
    })
  }

  public async restart(): Promise<void> {
    try {
      await this.socket?.end?.(new Error('manual-restart'))
    } catch {}
    this.socket = null
    this.status = 'disconnected'
    this.qrState = {}
    await this.start()
  }
}

export const whatsappClient = new WhatsAppClient()


