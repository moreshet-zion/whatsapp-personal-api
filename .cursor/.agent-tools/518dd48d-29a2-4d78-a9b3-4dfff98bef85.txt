{"author":"pashaba","body":"I keep geting connection closed while trying connect my number\nhere my code\nconsole.error = () =\u003e {};\n\nrequire('./settings');\nconst fs = require('fs');\nconst os = require('os');\nconst pino = require('pino');\nconst path = require('path');\nconst axios = require('axios');\nconst chalk = require('chalk');\nconst readline = require('readline');\nconst { Boom } = require('@hapi/boom');\nconst qrcode = require('qrcode-terminal');\nconst NodeCache = require('node-cache');\nconst { toBuffer, toDataURL } = require('qrcode');\nconst { exec, spawn, execSync } = require('child_process');\nconst { parsePhoneNumber } = require('awesome-phonenumber');\nconst { default: WAConnection, useMultiFileAuthState, Browsers, DisconnectReason, makeInMemoryStore, makeCacheableSignalKeyStore, fetchLatestBaileysVersion, proto, jidNormalizedUser, getAggregateVotesInPollMessage } = require('baileys');\n\nconst { dataBase } = require('./src/database');\nconst { app, server, PORT } = require('./src/server');\nconst { GroupParticipantsUpdate, MessagesUpsert, Solving } = require('./src/message');\nconst { isUrl, generateMessageTag, getBuffer, getSizeMedia, fetchJson, assertInstalled, sleep } = require('./lib/function');\n\nconst print = (label, value) =\u003e console.log(`${chalk.green.bold('‚ïë')} ${chalk.cyan.bold(label.padEnd(16))}${chalk.yellow.bold(':')} ${value}`);\nconst pairingCode = process.argv.includes('--qr') ? false : process.argv.includes('--pairing-code') || global.pairing_code;\nconst rl = readline.createInterface({ input: process.stdin, output: process.stdout });\nconst question = (text) =\u003e new Promise((resolve) =\u003e rl.question(text, resolve));\nlet pairingStarted = false;\nlet phoneNumber;\n\nconst userInfoSyt = () =\u003e {\n\ttry {\n\t\treturn os.userInfo().username;\n\t} catch (e) {\n\t\treturn process.env.USER || process.env.USERNAME || 'unknown';\n\t}\n};\n\nglobal.fetchApi = async (path = '/', query = {}, options) =\u003e {\n\tconst urlnya = (options?.name || options ? ((options?.name || options) in global.APIs ? global.APIs[(options?.name || options)] : (options?.name || options)) : global.APIs['hitori'] ? global.APIs['hitori'] : (options?.name || options)) + path + (query ? '?' + decodeURIComponent(new URLSearchParams(Object.entries({ ...query }))) : '');\n\tconst { data } = await axios.get(urlnya, { ...((options?.name || options) ? {} : { headers: { 'accept': 'application/json', 'x-api-key': global.APIKeys[global.APIs['hitori']] } }) });\n\treturn data;\n};\n\nconst storeDB = dataBase(global.tempatStore);\nconst database = dataBase(global.tempatDB);\nconst msgRetryCounterCache = new NodeCache();\n\nassertInstalled(process.platform === 'win32' ? 'where ffmpeg' : 'command -v ffmpeg', 'FFmpeg', 0);\nconsole.log(chalk.greenBright('‚úÖ  All external dependencies are satisfied'));\nconsole.log(chalk.green.bold(`‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê[${`${chalk.cyan(userInfoSyt())}@${chalk.cyan(os.hostname())}`}]‚ïê‚ïê‚ïê‚ïê‚ïê`));\nprint('OS', `${os.platform()} ${os.release()} ${os.arch()}`);\nprint('Uptime', `${Math.floor(os.uptime() / 3600)} h ${Math.floor((os.uptime() % 3600) / 60)} m`);\nprint('Shell', process.env.SHELL || process.env.COMSPEC || 'unknown');\nprint('CPU', os.cpus()[0]?.model.trim() || 'unknown');\nprint('Memory', `${(os.freemem()/1024/1024).toFixed(0)} MiB / ${(os.totalmem()/1024/1024).toFixed(0)} MiB`);\nprint('Script version', `v${require('./package.json').version}`);\nprint('Node.js', process.version);\nprint('Baileys', `v${require('./package.json').dependencies.baileys}`);\nprint('Date \u0026 Time', new Date().toLocaleString('en-US', { timeZone: 'Asia/Jakarta', hour12: false }));\nconsole.log(chalk.green.bold('‚ïö' + ('‚ïê'.repeat(30))));\n\nserver.listen(PORT, () =\u003e {\n\tconsole.log('App listened on port', PORT);\n\t\n});\n\n/*\n\t* Create By Naze\n\t* Follow https://github.com/nazedev\n\t* Whatsapp : https://whatsapp.com/channel/0029VaWOkNm7DAWtkvkJBK43\n*/\n\nasync function startNazeBot() {\n\tconst { state, saveCreds } = await useMultiFileAuthState('nazedev');\n\tconst { version, isLatest } = await fetchLatestBaileysVersion();\n\tconst level = pino({ level: 'silent' });\n\t\n\ttry {\n\t\tconst loadData = await database.read();\n\t\tconst storeLoadData = await storeDB.read();\n\t\tif (!loadData || Object.keys(loadData).length === 0) {\n\t\t\tglobal.db = {\n\t\t\t\thit: {},\n\t\t\t\tset: {},\n\t\t\t\tcmd: {},\n\t\t\t\tstore: {},\n\t\t\t\tusers: {},\n\t\t\t\tgame: {},\n\t\t\t\tgroups: {},\n\t\t\t\tdatabase: {},\n\t\t\t\tpremium: [],\n\t\t\t\tsewa: [],\n\t\t\t\t...(loadData || {}),\n\t\t\t};\n\t\t\tawait database.write(global.db);\n\t\t} else {\n\t\t\tglobal.db = loadData;\n\t\t}\n\t\tif (!storeLoadData || Object.keys(storeLoadData).length === 0) {\n\t\t\tglobal.store = {\n\t\t\t\tcontacts: {},\n\t\t\t\tpresences: {},\n\t\t\t\tmessages: {},\n\t\t\t\tgroupMetadata: {},\n\t\t\t\t...(storeLoadData || {}),\n\t\t\t};\n\t\t\tawait storeDB.write(global.store);\n\t\t} else {\n\t\t\tglobal.store = storeLoadData;\n\t\t}\n\t\t\n\t\tsetInterval(async () =\u003e {\n\t\t\tif (global.db) await database.write(global.db);\n\t\t\tif (global.store) await storeDB.write(global.store);\n\t\t}, 30 * 1000);\n\t} catch (e) {\n\t\tconsole.log(e);\n\t\tprocess.exit(1);\n\t}\n\t\n\tstore.loadMessage = function (remoteJid, id) {\n\t\tconst messages = store.messages?.[remoteJid]?.array;\n\t\tif (!messages) return null;\n\t\treturn messages.find(msg =\u003e msg?.key?.id === id) || null;\n\t};\n\t\n\tconst getMessage = async (key) =\u003e {\n\t\tif (store) {\n\t\t\tconst msg = await store.loadMessage(key.remoteJid, key.id);\n\t\t\treturn msg?.message || '';\n\t\t}\n\t\treturn {\n\t\t\tconversation: 'Halo Saya Naze Bot'\n\t\t};\n\t};\n\t\n\tconst naze = WAConnection({\n\t\tlogger: level,\n\t\tgetMessage,\n\t\tsyncFullHistory: true,\n\t\tmaxMsgRetryCount: 15,\n\t\tmsgRetryCounterCache,\n\t\tretryRequestDelayMs: 10,\n\t\tdefaultQueryTimeoutMs: 0,\n\t\tconnectTimeoutMs: 60000,\n\t\tbrowser: Browsers.ubuntu('Chrome'),\n\t\tgenerateHighQualityLinkPreview: true,\n\t\tshouldSyncHistoryMessage: msg =\u003e {\n\t\t\tconsole.log(`\\x1b[32mMemuat Chat [${msg.progress || 0}%]\\x1b[39m`);\n\t\t\treturn !!msg.syncType;\n\t\t},\n\t\ttransactionOpts: {\n\t\t\tmaxCommitRetries: 10,\n\t\t\tdelayBetweenTriesMs: 10,\n\t\t},\n\t\tappStateMacVerification: {\n\t\t\tpatch: true,\n\t\t\tsnapshot: true,\n\t\t},\n\t\tauth: {\n\t\t\tcreds: state.creds,\n\t\t\tkeys: makeCacheableSignalKeyStore(state.keys, level),\n\t\t},\n\t});\n\t\n\tif (pairingCode \u0026\u0026 !phoneNumber \u0026\u0026 !naze.authState.creds.registered) {\n\t\tasync function getPhoneNumber() {\n\t\t\tphoneNumber = global.number_bot ? global.number_bot : process.env.BOT_NUMBER || await question('Please type your WhatsApp number : ');\n\t\t\tphoneNumber = phoneNumber.replace(/[^0-9]/g, '');\n\t\t\t\n\t\t\tif (!parsePhoneNumber('+' + phoneNumber).valid \u0026\u0026 phoneNumber.length \u003c 6) {\n\t\t\t\tconsole.log(chalk.bgBlack(chalk.redBright('Start with your Country WhatsApp code') + chalk.whiteBright(',') + chalk.greenBright(' Example : 62xxx')));\n\t\t\t\tawait getPhoneNumber();\n\t\t\t}\n\t\t}\n\t\t(async () =\u003e {\n\t\t\tawait getPhoneNumber();\n\t\t\tawait exec('rm -rf ./nazedev/*');\n\t\t\tconsole.log('Phone number captured. Waiting for Connection...\\n' + chalk.blueBright('Estimated time: around 2 ~ 5 minutes'));\n\t\t})();\n\t}\n    \t\n\n\tawait Solving(naze, store);\n    autoSendStock(naze);\n    const axios = require(\"axios\");\n\nasync function fetchLiveStock() {\n  try {\n    console.log(\"[üåê] Mengambil data Plants vs Brainrot...\");\n\n    const res = await axios.get(\"https://www.panelcloud.xyz/api/stockst\", {\n      headers: {\n        \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36\",\n        \"Accept\": \"application/json, text/plain, */*\",\n        \"Referer\": \"https://panelcloud.xyz/\",\n        \"Origin\": \"https://panelcloud.xyz\",\n      },\n      timeout: 10000,\n    });\n\n    let data = res.data;\n\n    // --- Auto parse kalau dikirim dalam bentuk string JSON ---\n    if (typeof data === \"string\") {\n      try {\n        data = JSON.parse(data);\n        console.log(\"[‚ÑπÔ∏è] JSON string berhasil di-parse\");\n      } catch (e) {\n        console.error(\"[‚ùå] Format tidak bisa di-parse:\", e.message);\n        return null;\n      }\n    }\n\n    // --- Validasi isi ---\n    if (!data || !data.seeds || !data.gear) {\n      console.error(\"[‚ö†Ô∏è] Data tidak valid:\", data);\n      return null;\n    }\n\n    // --- Format jadi teks untuk template ---\n    let lines = [\n      \"üåª *Seeds Stock*\"\n    ];\n\n    for (const s of data.seeds) {\n      const qtyText = s.qty \u003e 0 ? `x${s.qty}` : \"x0\";\n      lines.push(`‚Ä¢ ${s.emoji} ${s.name} - ${qtyText}`);\n    }\n\n    lines.push(\"\", \"‚öôÔ∏è *Gear Stock*\");\n    for (const g of data.gear) {\n      const qtyText = g.qty \u003e 0 ? `x${g.qty}` : \"x0\";\n      lines.push(`‚Ä¢ ${g.emoji} ${g.name} - ${qtyText}`);\n    }\n\n\n    console.log(\"[‚úÖ] Data berhasil diformat dan siap dikirim!\");\n    return lines.join(\"\\n\");\n\n  } catch (err) {\n    console.error(\"[‚ùå] fetchLiveStock() error:\", err.message);\n    return null;\n  }\n}\n    fetchLiveStock().then(data =\u003e {\n\n  console.log(\"=== HASIL TEST ===\");\n\n  console.log(data || \"‚ùå Tidak ada data\");\n\n});\n// =============================== //\n// üß© UTILITAS\n// =============================== //\nfunction containsWord(text, word) {\n  const regex = new RegExp(\"\\\\b\" + word + \"\\\\b\", \"i\");\n  return regex.test(text);\n}\n// =============================== //\n// üåø TEMPLATE-TEMPLATE FORWARDER\n// =============================== //\nfunction getForwardedMessage1(text) {\n  const lower = text.toLowerCase();\n  const seeds = [\n    {name: \"cocotank\", emoji: \"ü••\"},\n    {name: \"carnivorous plant\", emoji: \"ü•©\"},\n    {name: \"mr carrot\", emoji: \"ü•ï\"},\n    {name: \"tomatrio\", emoji: \"üçÖ\"},\n    {name: \"shroombino\", emoji: \"üçÑ\"},\n    {name: \"mango\", emoji: \"ü•≠\"},\n    {name: \"king limone\", emoji: \"üçã\"}\n    \n  ];\n  let hasStock = seeds.some((s) =\u003e containsWord(lower, s.name));\n  if (!hasStock) return null;\n\n  return [\n    \"*üå± Seed Shop Restock!*\",\n    \"\",\n    ...seeds.map((s) =\u003e `- ${s.emoji} ${s.name} ${containsWord(lower, s.name) ? \"‚Äî 1x\" : \"‚Äî no stock\"}`),\n    \"\",\n    \"Note: `Kalau ga ada notif berarti stock nya jelek`\",\n  ].join(\"\\n\");\n}\n\nfunction getForwardedMessage2(text) {\n  const lower = text.toLowerCase();\n  const seeds = [\n    {name: \"cocotank\", emoji: \"ü••\"},\n    {name: \"carnivorous plant\", emoji: \"ü•©\"},\n    {name: \"mr carrot\", emoji: \"ü•ï\"},\n    {name: \"tomatrio\", emoji: \"üçÖ\"},\n    {name: \"shroombino\", emoji: \"üçÑ\"},\n    {name: \"mango\", emoji: \"ü•≠\"},\n    {name: \"king limone\", emoji: \"üçã\"}\n  ];\n  const available = seeds.filter((s) =\u003e containsWord(lower, s.name));\n  const notAvailable = seeds.filter((s) =\u003e !containsWord(lower, s.name));\n  if (available.length === 0) return null;\n\n  const waktu = new Date().toLocaleString(\"id-ID\", { timeZone: \"Asia/Jakarta\" });\n  return [\n    \"üîî Ding ding! *Rare Stock Baru Tersedia! Jangan Sampai kelewatan Ya~ üå±*\",\n    \"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\",\n    \"\",\n    \"‚ïî‚ïê„Ää üåø Seed Shop Restock „Äã‚ïê‚ïó\",\n    `üìÖ Update: ${waktu}`,\n    \"\",\n    \"‚úÖÔ∏è *Stok Tersedia:*\",\n    ...available.map((v) =\u003e `\u003e ${v.emoji} ${v.name}`),\n    \"\",\n    notAvailable.length ? \"‚ùå *Stok Tidak Tersedia:*\" : \"\",\n    ...notAvailable.map((v) =\u003e `- ${v.emoji} ${v.name}`),\n    \"\",\n     \n    \"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\",\n    \"üí° *Catatan: Jika tidak ada notif, berarti stoknya kurang bagus*.\",\n      \"Powered By : `https://www.panelcloud.xyz/`\",\n  ].join(\"\\n\");\n}\n\nfunction getForwardedMessage3(text) {\n  const lower = text.toLowerCase();\n  const seeds = [\n    {name: \"cocotank\", emoji: \"ü••\"},\n    {name: \"carnivorous plant\", emoji: \"ü•©\"},\n    {name: \"mr carrot\", emoji: \"ü•ï\"},\n    {name: \"tomatrio\", emoji: \"üçÖ\"},\n    {name: \"shroombino\", emoji: \"üçÑ\"},\n    {name: \"mango\", emoji: \"ü•≠\"},\n    {name: \"king limone\", emoji: \"üçã\"}\n  ];\n  let hasStock = seeds.some((s) =\u003e containsWord(lower, s.name));\n  if (!hasStock) return null;\n\n  return [\n    \"*_Plant Vs Brainrot Good Stock‚òòÔ∏è‚ò†Ô∏è_*\",\n    \"\",\n    ...seeds.map((s) =\u003e `‚Ä¢ ${s.emoji} ${s.name} - ${containsWord(lower, s.name) ? \"x1\" : \"x0\"}`),\n    \"\",\n    \"*_NOTE : ADA NOTIF ADA STOCK BAGUS_*\",\n  ].join(\"\\n\");\n}\n\nfunction getForwardedMessage4(text) {\n  const lower = text.toLowerCase();\n  const seeds = [\n    {name: \"cocotank\", emoji: \"ü••\"},\n    {name: \"carnivorous plant\", emoji: \"ü•©\"},\n    {name: \"mr carrot\", emoji: \"ü•ï\"},\n    {name: \"tomatrio\", emoji: \"üçÖ\"},\n    {name: \"shroombino\", emoji: \"üçÑ\"},\n    {name: \"mango\", emoji: \"ü•≠\"},\n    {name: \"king limone\", emoji: \"üçã\"}\n  ];\n  let hasStock = seeds.some((s) =\u003e containsWord(lower, s.name));\n  if (!hasStock) return null;\n\n  return [\"*‚òòÔ∏è Seed Rare Restock ‚òòÔ∏è*\", \"\", ...seeds.map((s) =\u003e `* ${s.emoji} ${s.name} ‚Äî ${containsWord(lower, s.name) ? \"1x\" : \"no stock\"}`)].join(\"\\n\");\n}\n\nfunction getForwardedMessage5(text) {\n  return text || null;\n}\n\nfunction getForwardedMessage6(text) {\n  const lower = text.toLowerCase();\n  const seeds = [\n    {name: \"carnivorous plant\", emoji: \"ü•©\"},\n    {name: \"mr carrot\", emoji: \"ü•ï\"},\n    {name: \"tomatrio\", emoji: \"üçÖ\"},\n    {name: \"shroombino\", emoji: \"üçÑ\"},\n    {name: \"mango\", emoji: \"ü•≠\"},\n    {name: \"king limone\", emoji: \"üçã\"}\n  ];\n  let hasStock = seeds.some((s) =\u003e containsWord(lower, s.name));\n  if (!hasStock) return null;\n\n  return [\n    \"*üå± Seed Shop Restock!*\",\n    \"\",\n    ...seeds.map((s) =\u003e `‚Ä¢ ${s.emoji} ${s.name} ‚Äî ${containsWord(lower, s.name) ? \"1x\" : \"no stock\"}`),\n    \"\",\n    \"Note : `Kalau ga ada notif berarti stock nya jelek`\",\n  ].join(\"\\n\");\n}\n    \nasync function getForwardedMessage7(naze, jid, text) {\n  const lower = text.toLowerCase();\n  const seeds = [\n    { name: \"carnivorous plant\", display: \"Carnivorous Plant\", emoji: \"ü•©\" },\n    { name: \"mr carrot\", display: \"Mr Carrot\", emoji: \"ü•ï\" },\n    { name: \"tomatrio\", display: \"Tomatrio\", emoji: \"üçÖ\" },\n    { name: \"shroombino\", display: \"Shroombino\", emoji: \"üçÑ\" },\n    { name: \"mango\", display: \"Mango\", emoji: \"ü•≠\" },\n    { name: \"king limone\", display: \"King Limone\", emoji: \"üçã\" },\n  ];\n\n  const available = seeds.filter((s) =\u003e containsWord(lower, s.name));\n  if (available.length === 0) return;\n\n  const waktu = new Date().toLocaleString(\"id-ID\", {\n    timeZone: \"Asia/Jakarta\",\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n  });\n\n  const messageText = [\n    \"üîî Ding ding! *Rare Stock Baru Tersedia!*\",\n    \"\",\n    \"*üåø PLANTS SHOP RESTOCK!*\",\n    \"\",\n    ...available.map((v) =\u003e `${v.emoji} *${v.display}*\\n+1 stock`),\n    \"\",\n    \"_Stock diperbarui otomatis setiap restock._\",\n    `üïí ${waktu}`,\n    \"\",\n    \"üëë Powered by: `https://www.panelcloud.xyz/`\",\n  ].join(\"\\n\");\n\n  const buttons = [\n    { buttonId: \"w_stock\", buttonText: { displayText: \"ü§©W Stock\" }, type: 1 },\n    { buttonId: \"l_stock\", buttonText: { displayText: \"ü§ÆL Stock\" }, type: 1 },\n  ];\n\n  await naze.sendMessage(jid, { text: messageText, buttons, headerType: 1 });\n}\n\nfunction getForwardedMessageRare(data) { /* ... tetap seperti punyamu ... */ }\n\n// ===================================== //\n// üîÅ Kirim otomatis ke template \u0026 target //\n// =====================================\nasync function autoSendStock(naze) {\n  setInterval(async () =\u003e {\n    const now = new Date();\n    const minute = now.getMinutes();\n    if (minute % 5 !== 0) return; // jalan tiap 5 menit\n\n    console.log(\"üïì Mengambil data Plants vs Brainrot...\");\n    const text = await fetchLiveStock();\n    if (!text) return console.log(\"‚ö†Ô∏è Data kosong, skip.\");\n\n    const messages = {\n      1: getForwardedMessage1(text),\n      2: getForwardedMessage2(text),\n      3: getForwardedMessage3(text),\n      4: getForwardedMessage4(text),\n      5: getForwardedMessage5(text),\n      6: getForwardedMessage6(text),\n      rare: getForwardedMessageRare(text),\n    };\n\n    const targets = [\n      [\"120363404217567903@newsletter\", messages[1]],\n      [\"120363401455900532@newsletter\", \"TEMPLATE7\"], // kirim dengan tombol\n      [\"120363405350357291@newsletter\", messages.rare],\n      [\"120363403358672874@newsletter\", messages.rare],\n      [\"120363421526426474@g.us\", messages[1]],\n      [\"120363419506559832@g.us\", messages[2]],\n      [\"120363401980058269@newsletter\", messages[2]],\n      [\"120363421488169240@newsletter\", messages[4]],\n      [\"120363402158802389@newsletter\", messages[3]],\n      [\"120363421877327956@newsletter\", messages[6]],\n      [\"120363314602849511@newsletter\", messages[5]],\n      [\"120363420287965952@g.us\", messages[1]],\n      [\"120363328036612718@newsletter\", messages[5]],\n      [\"120363421612899599@newsletter\", messages[3]],\n    ];\n\n    let sent = 0;\n    for (const [jid, msg] of targets) {\n      if (msg === \"TEMPLATE7\") {\n        await getForwardedMessage7(naze, jid, text);\n      } else if (msg) {\n        await naze.sendMessage(jid, { text: msg });\n      }\n      sent++;\n    }\n\n    console.log(`üì® ${sent} pesan berhasil dikirim!`);\n  }, 60_000); // cek tiap 1 menit\n}\n\n// Jalankan autoSendStock setelah semua fungsi siap\nautoSendStock(naze);\n// Panggil fungsi ini setelah koneksi bot siap\n// Contoh: await Solving(naze, store); autoSendStock(naze);\n// === CONFIG ===\nconst GROUP_TO_MONITOR = '120363419506559832@g.us';\nconst MAIN_ADMIN = '6285715294026@s.whatsapp.net'; // admin utama yang akan di-tag\nconst urlRegex = /(https?:\\/\\/[^\\s]+)|([^\\s]+\\.(com|net|org|id|us|xyz|io|app|gg|link|site))/i;\n\nnaze.ev.on('messages.upsert', async (chatUpdate) =\u003e {\n  try {\n    if (!chatUpdate.messages) return;\n    const m = chatUpdate.messages[0];\n    if (!m) return;\n\n    if (m.key \u0026\u0026 m.key.fromMe) return;\n    if (!m.message) return;\n\n    const remoteJid = m.key.remoteJid; \n    if (!remoteJid || remoteJid !== GROUP_TO_MONITOR) return;\n\n    let text = '';\n    const message = m.message;\n    if (message.conversation) text = message.conversation;\n    else if (message.extendedTextMessage \u0026\u0026 message.extendedTextMessage.text) text = message.extendedTextMessage.text;\n    else if (message.imageMessage \u0026\u0026 message.imageMessage.caption) text = message.imageMessage.caption;\n    else if (message.videoMessage \u0026\u0026 message.videoMessage.caption) text = message.videoMessage.caption;\n    else if (message.documentMessage \u0026\u0026 message.documentMessage.caption) text = message.documentMessage.caption;\n\n    if (!text) return; \n    \n    if (urlRegex.test(text)) {\n      const sender = m.key.participant || m.key.remoteJid;\n      if (!sender) return;\n\n      // Kirim notifikasi singkat di grup (opsional): beri tahu bahwa link terdeteksi\n      try {\n        await naze.sendMessage(\n          remoteJid,\n          { text: `üîé Terdeteksi pesan berisi link. Saya sudah men-tag admin untuk ditindaklanjuti.` },\n          { quoted: m }\n        );\n      } catch (e) {\n        console.error('Gagal kirim notifikasi deteksi:', e?.message || e);\n      }\n\n      // Tag admin utama dengan detail pengirim \u0026 cuplikan pesan (tanpa mengeluarkan pengirim)\n      try {\n        const mentionText = `@${MAIN_ADMIN.split('@')[0]} Tolong cek pesan berikut:\\n\\nPengirim: @${sender.split('@')[0]}\\nIsi pesan: ${text.slice(0, 300)}`; // potong panjang bila perlu\n\n        await naze.sendMessage(\n          remoteJid,\n          { text: mentionText, contextInfo: { mentionedJid: [MAIN_ADMIN, sender] } },\n          { quoted: m }\n        );\n      } catch (err) {\n        console.error('Gagal men-tag admin utama:', err);\n        return;\n      }\n\n      // TIDAK ADA aksi remove/kick ‚Äî sesuai permintaan\n    }\n  } catch (e) {\n    console.error('Error handler monitor link:', e);\n  }\n});const rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout,\n});\n\nconst features = {};\nconst featureList = {\n  target1:  \"Darz Ch\",\n  target2:  \"Template Utama\",\n  target3:  \"Rare Stock 1\",\n  target4:  \"Rare Stock 2\",\n  target5:  \"Grup Forward 1\",\n  target6:  \"Grup Forward 2\",\n  target7:  \"Daily Drop\",\n  target8:  \"Stock Alert\",\n  target9:  \"Mystic Panel\",\n  target10: \"Event Notify\",\n  target11: \"Grow Update\",\n  target12: \"Seed Hunter\",\n  target13: \"Mythical Ping\",\n  target14: \"Godly Report\",\n  target15: \"Fast Forward\",\n  target16: \"Premium Panel\",\n  target17: \"Auto Notify\",\n  target18: \"Bot Activity\",\n  target19: \"Status Sync\",\n  target20: \"Weather Pulse\",\n  target21: \"Shop Broadcast\",\n  target22: \"Secret Drop\",\n  target23: \"Panel Alert\",\n  target24: \"Rare Notify\",\n  target25: \"Ping Radar\",\n  target26: \"Stock Scanner\",\n  target27: \"Panel Guard\",\n  target28: \"Backup Relay\",\n  target29: \"Yessir Channel\",\n  target30: \"Mirror Node\"\n};\n\n// Inisialisasi semua target aktif\nfor (let i = 1; i \u003c= 30; i++) {\n  if (!features[`target${i}`]) features[`target${i}`] = true;\n}\nconst separator = \"‚ïê\".repeat(46);\nconst miniLine = \"‚îÄ\".repeat(46);\n\nfunction getTime() {\n  const now = new Date();\n  return now.toLocaleString(\"id-ID\", { timeZone: \"Asia/Jakarta\" });\n}\n\nfunction getUptime() {\n  const uptime = process.uptime();\n  const h = Math.floor(uptime / 3600);\n  const m = Math.floor((uptime % 3600) / 60);\n  const s = Math.floor(uptime % 60);\n  return `${h}h ${m}m ${s}s`;\n}\n\nfunction showHeader(title) {\n  console.log(`\\n${chalk.cyanBright(\"‚ïî\" + separator + \"‚ïó\")}`);\n  console.log(`‚ïë ${chalk.bold(title)}`);\n  console.log(`${chalk.cyanBright(\"‚ï†\" + separator + \"‚ï£\")}`);\n}\n\nfunction showFooter() {\n  console.log(`${chalk.cyanBright(\"‚ïö\" + separator + \"‚ïù\")}\\n`);\n}\n\nfunction showTest() {\n  const active = Object.values(features).filter(Boolean).length;\n\n  showHeader(\"ü§ñ BOT STATUS PANEL\");\n  console.log(`‚ïë üü¢ Status        : ${chalk.green(\"Aktif \u0026 Berjalan\")}`);\n  console.log(`‚ïë üîÑ Auto Forward  : ${chalk.green(\"ON\")}`);\n  console.log(`‚ïë üì° WA Connection : ${chalk.green(\"Connected\")}`);\n  console.log(`‚ïë üïí Server Time   : ${chalk.yellow(getTime())}`);\n  console.log(`‚ïë ‚è±Ô∏è Uptime        : ${chalk.cyan(getUptime())}`);\n  console.log(`‚ïë üì¶ Target Aktif  : ${chalk.magenta(`${active} dari 13 Channel`)}`);\n  showFooter();\n}\n\nfunction showStatus() {\n  showHeader(\"üìä FEATURE STATUS PANEL\");\n\n  for (let i = 1; i \u003c= 32; i++) {\n    const key = `target${i}`;\n    const name = featureList[key] || `Target ${i}`;\n    const status = features[key]\n      ? chalk.green(\"‚úÖ Aktif\")\n      : chalk.red(\"‚ùå Nonaktif\");\n    console.log(\n      `‚ïë üéØ Target ${i.toString().padEnd(2)} (${name.padEnd(18)}) : ${status}`\n    );\n  }\n\n  console.log(`${chalk.cyanBright(\"‚ï†\" + miniLine + \"‚ï£\")}`);\n  console.log(`‚ïë üïí Server Time : ${chalk.yellow(getTime())}`);\n  console.log(`‚ïë ‚è±Ô∏è Uptime      : ${chalk.cyan(getUptime())}`);\n  console.log(`‚ïë üß© Jadwal Cek  : ${chalk.magenta(\"Tiap 5 Menit (Auto Forward)\")}`);\n  showFooter();\n}\n\nfunction showHelp() {\n  showHeader(\"üí° AVAILABLE COMMANDS\");\n  console.log(`‚ïë ‚ñ∂ ${chalk.green(\"test\")}    ‚Üí Menampilkan status bot secara umum`);\n  console.log(`‚ïë ‚ñ∂ ${chalk.green(\"status\")}  ‚Üí Menampilkan status ke-13 target`);\n  console.log(`‚ïë ‚ñ∂ ${chalk.green(\"help\")}    ‚Üí Menampilkan daftar perintah ini`);\n  showFooter();\n}\n\nrl.on(\"line\", (input) =\u003e {\n  const cmd = input.trim().toLowerCase();\n\n  switch (cmd) {\n    case \"test\":\n      showTest();\n      break;\n    case \"status\":\n      showStatus();\n      break;\n    case \"help\":\n      showHelp();\n      break;\n    case \"\":\n      break;\n    default:\n      console.log(\n        `${chalk.red(\"‚ùå Command tidak dikenal:\")} ${chalk.yellow(cmd)}`\n      );\n      console.log(`Ketik ${chalk.green(\"help\")} untuk melihat daftar perintah.\\n`);\n  }\n});\n\tnaze.ev.on('creds.update', saveCreds)\n\t\n\tnaze.ev.on('connection.update', async (update) =\u003e {\n\t\tconst { qr, connection, lastDisconnect, isNewLogin, receivedPendingNotifications } = update\n\t\tif (!naze.authState.creds.registered) console.log('Connection: ', connection || false);\n\t\tif ((connection === 'connecting' || !!qr) \u0026\u0026 pairingCode \u0026\u0026 phoneNumber \u0026\u0026 !naze.authState.creds.registered \u0026\u0026 !pairingStarted) {\n\t\t\tsetTimeout(async () =\u003e {\n\t\t\t\tpairingStarted = true;\n\t\t\t\tconsole.log('Requesting Pairing Code...')\n\t\t\t\tlet code = await naze.requestPairingCode(phoneNumber);\n\t\t\t\tconsole.log(chalk.blue('Your Pairing Code :'), chalk.green(code), '\\n', chalk.yellow('Expires in 15 second'));\n\t\t\t}, 3000)\n\t\t}\n\t\tif (connection === 'close') {\n\t\t\tconst reason = new Boom(lastDisconnect?.error)?.output.statusCode\n\t\t\tif (reason === DisconnectReason.connectionLost) {\n\t\t\t\tconsole.log('Connection to Server Lost, Attempting to Reconnect...');\n\t\t\t\tstartNazeBot()\n\t\t\t} else if (reason === DisconnectReason.connectionClosed) {\n\t\t\t\tconsole.log('Connection closed, Attempting to Reconnect...');\n\t\t\t\tstartNazeBot()\n\t\t\t} else if (reason === DisconnectReason.restartRequired) {\n\t\t\t\tconsole.log('Restart Required...');\n\t\t\t\tstartNazeBot()\n\t\t\t} else if (reason === DisconnectReason.timedOut) {\n\t\t\t\tconsole.log('Connection Timed Out, Attempting to Reconnect...');\n\t\t\t\tstartNazeBot()\n\t\t\t} else if (reason === DisconnectReason.badSession) {\n\t\t\t\tconsole.log('Delete Session and Scan again...');\n\t\t\t\tstartNazeBot()\n\t\t\t} else if (reason === DisconnectReason.connectionReplaced) {\n\t\t\t\tconsole.log('Close current Session first...');\n\t\t\t} else if (reason === DisconnectReason.loggedOut) {\n\t\t\t\tconsole.log('Scan again and Run...');\n\t\t\t\texec('rm -rf ./nazedev/*')\n\t\t\t\tprocess.exit(1)\n\t\t\t} else if (reason === DisconnectReason.forbidden) {\n\t\t\t\tconsole.log('Connection Failure, Scan again and Run...');\n\t\t\t\texec('rm -rf ./nazedev/*')\n\t\t\t\tprocess.exit(1)\n\t\t\t} else if (reason === DisconnectReason.multideviceMismatch) {\n\t\t\t\tconsole.log('Scan again...');\n\t\t\t\texec('rm -rf ./nazedev/*')\n\t\t\t\tprocess.exit(0)\n\t\t\t} else {\n\t\t\t\tnaze.end(`Unknown DisconnectReason : ${reason}|${connection}`)\n\t\t\t}\n\t\t}\n\t\tif (connection == 'open') {\n\t\t\tconsole.log('Connected to : ' + JSON.stringify(naze.user, null, 2));\n\t\t\tlet botNumber = await naze.decodeJid(naze.user.id);\n\t\t\tif (global.db?.set[botNumber] \u0026\u0026 !global.db?.set[botNumber]?.join) {\n\t\t\t\tif (my.ch.length \u003e 0 \u0026\u0026 my.ch.includes('@newsletter')) {\n\t\t\t\t\tif (my.ch) await naze.newsletterMsg(my.ch, { type: 'follow' }).catch(e =\u003e {})\n\t\t\t\t\tdb.set[botNumber].join = true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (qr) {\n\t\t\tif (!pairingCode) qrcode.generate(qr, { small: true })\n\t\t\tapp.use('/qr', async (req, res) =\u003e {\n\t\t\t\tres.setHeader('content-type', 'image/png')\n\t\t\t\tres.end(await toBuffer(qr))\n\t\t\t});\n\t\t}\n\t\tif (isNewLogin) console.log(chalk.green('New device login detected...'))\n\t\tif (receivedPendingNotifications == 'true') {\n\t\t\tconsole.log('Please wait About 1 Minute...')\n\t\t\tnaze.ev.flush()\n\t\t}\n\t});\n\t\n\tnaze.ev.on('contacts.update', (update) =\u003e {\n\t\tfor (let contact of update) {\n\t\t\tlet trueJid;\n\t\t\tif (!trueJid) continue;\n\t\t\tif (contact.id.endsWith('@lid')) {\n\t\t\t\ttrueJid = naze.findJidByLid(contact.id, store);\n\t\t\t} else {\n\t\t\t\ttrueJid = jidNormalizedUser(contact.id);\n\t\t\t}\n\t\t\tstore.contacts[trueJid] = {\n\t\t\t\t...store.contacts[trueJid],\n\t\t\t\tid: trueJid,\n\t\t\t\tname: contact.notify\n\t\t\t}\n\t\t\tif (contact.id.endsWith('@lid')) {\n\t\t\t\tstore.contacts[trueJid].lid = jidNormalizedUser(contact.id);\n\t\t\t}\n\t\t}\n\t});\n\t\n\tnaze.ev.on('call', async (call) =\u003e {\n\t\tlet botNumber = await naze.decodeJid(naze.user.id);\n\t\tif (global.db?.set[botNumber]?.anticall) {\n\t\t\tfor (let id of call) {\n\t\t\t\tif (id.status === 'offer') {\n\t\t\t\t\tlet msg = await naze.sendMessage(id.from, { text: `Saat Ini, Kami Tidak Dapat Menerima Panggilan ${id.isVideo ? 'Video' : 'Suara'}.\\nJika @${id.from.split('@')[0]} Memerlukan Bantuan, Silakan Hubungi Owner :)`, mentions: [id.from]});\n\t\t\t\t\tawait naze.sendContact(id.from, global.owner, msg);\n\t\t\t\t\tawait naze.rejectCall(id.id, id.from)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\t\n\tnaze.ev.on('messages.upsert', async (message) =\u003e {\n\t\tawait MessagesUpsert(naze, message, store);\n\t});\n\t\n\tnaze.ev.on('group-participants.update', async (update) =\u003e {\n\t\tawait GroupParticipantsUpdate(naze, update, store);\n\t});\n\t\n\tnaze.ev.on('groups.update', (update) =\u003e {\n\t\tfor (const n of update) {\n\t\t\tif (store.groupMetadata[n.id]) {\n\t\t\t\tObject.assign(store.groupMetadata[n.id], n);\n\t\t\t} else store.groupMetadata[n.id] = n;\n\t\t}\n\t});\n\t\n\tnaze.ev.on('presence.update', ({ id, presences: update }) =\u003e {\n\t\tstore.presences[id] = store.presences?.[id] || {};\n\t\tObject.assign(store.presences[id], update);\n\t});\n\t\n\tsetInterval(async () =\u003e {\n\t\tif (naze?.user?.id) await naze.sendPresenceUpdate('available', naze.decodeJid(naze.user.id)).catch(e =\u003e {})\n\t}, 10 * 60 * 1000);\n\n\treturn naze\n}\nstartNazeBot().then((naze) =\u003e {\n\trl.on('line', async (input) =\u003e {\n\t\tconst args = input.trim().split(' ')\n\t\tconst cmd = args.shift()\n\n\t\t// ===== Command: decodegrup =====\n  \n\t\tif (cmd === 'decodegrup') {\n\t\t\ttry {\n\t\t\t\tlet link = args[0]\n\t\t\t\tif (!link) {\n\t\t\t\t\tconsole.log('‚ùå Harap masukkan link grup, contoh:')\n\t\t\t\t\tconsole.log('decodegrup https://chat.whatsapp.com/xxxx')\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\tif (!link.includes('chat.whatsapp.com')) {\n\t\t\t\t\tconsole.log('‚ùå Link bukan link grup WhatsApp.')\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\tconst code = link.split('/').pop().split('?')[0]\n\t\t\t\tconst info = await naze.groupGetInviteInfo(code)\n\n\t\t\t\tconsole.log('‚úÖ Grup ditemukan!')\n\t\t\t\tconsole.log('Nama   :', info.subject)\n\t\t\t\tconsole.log('Owner  :', info.owner || 'Tidak diketahui')\n\t\t\t\tconsole.log('JID    :', info.id)\n\n\t\t\t\tfs.appendFileSync('decoded_jid.txt', info.id + '\\n')\n\t\t\t\tconsole.log('üìÇ JID grup disimpan di decoded_jid.txt')\n\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error('‚ùå Gagal decode link grup:', e.message)\n\t\t\t}\n\t\t}\n\n\t\t// ===== Command: decodesaluran =====\n\t\telse if (cmd === 'decodesaluran') {\n\t\t\ttry {\n\t\t\t\tlet link = args[0]\n\t\t\t\tif (!link) {\n\t\t\t\t\tconsole.log('‚ùå Harap masukkan link saluran, contoh:')\n\t\t\t\t\tconsole.log('decodesaluran https://whatsapp.com/channel/xxxx')\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\tif (!link.includes('whatsapp.com/channel')) {\n\t\t\t\t\tconsole.log('‚ùå Link bukan link saluran WhatsApp.')\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\tconst code = link.split('/').pop().split('?')[0]\n\t\t\t\tconst jid = `${code}@newsletter`\n\n\t\t\t\tconsole.log('üîç Memproses link saluran...')\n\t\t\t\tlet nama = '(Tidak diketahui)'\n\n\t\t\t\t// Beberapa versi naze tidak punya method newsletterMetadata\n\t\t\t\tif (typeof naze.newsletterMetadata === 'function') {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst info = await naze.newsletterMetadata(jid)\n\t\t\t\t\t\tnama = info?.name || '(Tidak bisa diambil)'\n\t\t\t\t\t} catch {\n\t\t\t\t\t\tconsole.warn('‚ö†Ô∏è Tidak bisa ambil metadata saluran otomatis.')\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn('‚ö†Ô∏è Fungsi newsletterMetadata tidak tersedia di versi ini.')\n\t\t\t\t}\n\n\t\t\t\tconsole.log('‚úÖ Saluran ditemukan!')\n\t\t\t\tconsole.log('Nama   :', nama)\n\t\t\t\tconsole.log('JID    :', jid)\n\n\t\t\t\tfs.appendFileSync('decoded_jid.txt', jid + '\\n')\n\t\t\t\tconsole.log('üìÇ JID saluran disimpan di decoded_jid.txt')\n\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error('‚ùå Gagal decode saluran:', e.message)\n\t\t\t}\n\t\t}\n\n\t\t// ===== Jika command tidak dikenal =====\n\t\telse {\n\t\t\tconsole.log('‚ùå Command tidak dikenal. Gunakan:')\n\t\t\tconsole.log('- decodegrup \u003clink_grup\u003e')\n\t\t\tconsole.log('- decodesaluran \u003clink_saluran\u003e')\n\t\t}\n\t})\n})\n// Process Exit\nconst cleanup = async (signal) =\u003e {\n\tconsole.log(`Received ${signal}. Menyimpan database...`)\n\tif (global.db) await database.write(global.db)\n\tif (global.store) await storeDB.write(global.store)\n\tserver.close(() =\u003e {\n\t\tconsole.log('Server closed. Exiting...')\n\t\tprocess.exit(0)\n\t})\n}\n\n\nprocess.on('SIGINT', () =\u003e cleanup('SIGINT'))\nprocess.on('SIGTERM', () =\u003e cleanup('SIGTERM'))\nprocess.on('exit', () =\u003e cleanup('exit'))\n\nserver.on('error', (error) =\u003e {\n\tif (error.code === 'EADDRINUSE') {\n\t\tconsole.log(`Address localhost:${PORT} in use. Please retry when the port is available!`);\n\t\tserver.close();\n\t} else console.error('Server error:', error);\n});\n\n// Auto restart tiap 2 jam (7200000 ms)\nsetInterval(() =\u003e {\n  console.log(\"‚è≥ Restart otomatis setelah 2 jam runtime...\");\n  process.exit(0);\n}, 1000 * 60 * 60 * 2);","comments":["use new baileys code, don't use 'WAConnection' anymore. read docs","Please, read the documentation: https://baileys.wiki/docs/socket/connecting"],"createdAt":"2025-10-15T12:57:09Z","number":1938,"state":"OPEN","title":"[BUG] Connection closed everytime","updatedAt":"2025-10-15T16:34:28Z"}
